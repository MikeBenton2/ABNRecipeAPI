openapi: "3.0.0"
info:
  title: "Recipe API"
  version: "1.0"
  description:
    "This API allows users to manage their favourite recipes by allowing them to add, update, remove and fetch recipes."
  x-apiType: "public"
paths:
  /recipes:
    get:
      summary: Get all recipes
      operationId: getRecipes
      tags:
        - recipe
      requestBody:
        description: "Search request parameters"
        required: false
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/SearchRequest"
      responses:
        "200":
          description: "An array of recipes"
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/RecipeDTO"
        "400":
          description: "Bad Request."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
              example:
                {
                  "errors": 
                    [
                      {
                        "code": "invalid_parameters",
                        "message": "The parameters sent are invalid.",
                        "status": "404"
                      }
                    ]
                }
        "404":
          description: "No recipes found."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
              example:
                {
                  "errors": 
                  [
                    {
                      "code": "empty_recipe_repository",
                      "message": "Their are no recipes saved.",
                      "status": "404"
                    }
                  ]
                }
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a recipe
      operationId: createRecipe
      tags:
        - recipe
      requestBody:
        description: "Create Recipe payload"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/RecipeDTO"
      responses:
        "201":
          description: Recipe created successfully.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/RecipeDTO"
        "400":
            description: "Bad Request."
            content:
              "application/json":
                schema:
                  $ref: "#/components/schemas/Error"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a recipe
      operationId: updateRecipe
      tags:
        - recipe
      requestBody:
        description: "Updated Recipe payload"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/RecipeDTO"
      responses:
        "201":
          description: Recipe updated successfully.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/RecipeDTO"
        "400":
          description: "Bad Request."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
  /recipes/{recipeId}:
    get:
      summary: Info for a specific recipe
      operationId: getRecipeById
      tags:
        - recipe
      parameters:
        - name: recipeId
          in: path
          required: true
          description: The id of the recipe to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/RecipeDTO"
    delete:
      summary: Delete recipe by id
      operationId: deleteRecipe
      tags:
        - recipe
      parameters:
        - name: recipeId
          in: path
          required: true
          description: The id of the recipe to retrieve
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Recipe deleted successfully.
          content:
            "application/json":
              schema:
                type: string
        "404":
          description: Recipe ID not found
        "401":
          description: Unauthorized
  /ingredients:
    get:
      summary: Retrieve all ingredients
      operationId: getIngredients
      tags:
        - ingredient
      responses:
        "200":
          description: "An array of ingredients"
          content:
            "application/json":
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/IngredientDTO"
        "400":
          description: "Bad Request."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
              example:
                {
                  "errors":
                    [
                      {
                        "code": "invalid_parameters",
                        "message": "The parameters sent are invalid.",
                        "status": "404"
                      }
                    ]
                }
        "404":
          description: "No ingredients found."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
              example:
                {
                  "errors":
                    [
                      {
                        "code": "empty_ingredient_repository",
                        "message": "Their are no ingredients saved.",
                        "status": "404"
                      }
                    ]
                }
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a ingredient
      operationId: createIngredient
      tags:
        - ingredient
      requestBody:
        description: "Create Ingredient"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/IngredientDTO"
      responses:
        "201":
          description: Ingredient created successfully.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/IngredientDTO"
        "400":
          description: "Bad Request."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a ingredient
      operationId: updateIngredient
      tags:
        - recipe
      requestBody:
        description: "Updated Ingredient"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/IngredientDTO"
      responses:
        "201":
          description: Ingredient updated successfully.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/IngredientDTO"
        "400":
          description: "Bad Request."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
  /ingredients/{id}:
    get:
      summary: Info for a specific ingredient
      operationId: getIngredientById
      tags:
        - ingredient
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the ingredient to retrieve
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Expected response to a valid request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/IngredientDTO"
    delete:
      summary: Delete ingredient by id
      operationId: deleteIngredient
      tags:
        - ingredient
      parameters:
        - name: id
          in: path
          required: true
          description: The id of the Ingredient to delete
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Ingredient deleted successfully.
          content:
            "application/json":
              schema:
                type: string
        "404":
          description: Ingredient ID not found
        "401":
          description: Unauthorized
  /recipeIngredients:
    post:
      summary: Add ingredients to a recipe
      operationId: addIngredientsToRecipe
      tags:
        - recipeIngredient
      requestBody:
        description: "Add Ingredient to Recipe"
        required: true
        content:
          "application/json":
            schema:
              $ref: "#/components/schemas/RecipeDTO"
      responses:
        "201":
          description: Ingredient added successfully.
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/RecipeDTO"
        "400":
          description: "Bad Request."
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
        "500":
          description: "Server error"
          content:
            "application/json":
              schema:
                $ref: "#/components/schemas/Error"
  /recipeIngredients/{recipeId}/ingredients/{ingredientId}:
    delete:
      summary: Delete ingredient from a recipe
      operationId: deleteRecipeIngredient
      tags:
        - recipeIngredient
      parameters:
        - name: recipeId
          in: path
          required: true
          description: The id of the recipe
          schema:
            type: string
            format: uuid
        - name: ingredientId
          in: path
          required: true
          description: The id of the ingredient
          schema:
            type: string
            format: uuid
      responses:
        "200":
          description: Ingredient deleted successfully.
          content:
            "application/json":
              schema:
                type: string
        "404":
          description: Ingredient or recipe not found
        "401":
          description: Unauthorized
components:
  schemas:
    RecipeDTO:
      type: object
      required:
        - name
        - instructions
        - isVegetarian
        - numberOfServings
        - ingredients
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
        instructions:
          type: string
          minLength: 1
        isVegetarian:
          type: boolean
        numberOfServings:
          type: integer
        ingredients:
          type: array
          minItems: 1
          maxItems: 100
          items:
            $ref: "#/components/schemas/IngredientDTO"
    IngredientDTO:
      type: object
      required:
        - name
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
          minLength: 1
    Filter:
      type: object
      x-class-extra-annotation: "@lombok.Builder"
      properties:
        key:
          type: string
        operation:
          type: string
        numberOfElements:
          type: integer
        value:
          type: object
    SearchRequest:
      type: object
      x-class-extra-annotation: "@lombok.Builder"
      properties:
        filters:
          type: array
          items:
            $ref: "#/components/schemas/Filter"
        page:
          type: integer
        numberOfElements:
          type: integer
        sortBy:
          type: string
    Error:
      type: object
      x-class-extra-annotation: "@lombok.Builder"
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string