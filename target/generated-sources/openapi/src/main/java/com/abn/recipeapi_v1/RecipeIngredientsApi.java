/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.abn.recipeapi_v1;

import com.abn.recipeapi_v1.model.Error;
import com.abn.recipeapi_v1.model.RecipeDTO;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-05-24T16:27:39.935937+02:00[Europe/Amsterdam]")
@Validated
@Tag(name = "recipeIngredient", description = "the recipeIngredient API")
public interface RecipeIngredientsApi {

    default RecipeIngredientsApiDelegate getDelegate() {
        return new RecipeIngredientsApiDelegate() {};
    }

    /**
     * POST /recipeIngredients : Add a ingredient to a recipe
     *
     * @param recipeDTO Add Ingredient to Recipe (required)
     * @return Ingredient added successfully. (status code 201)
     *         or Bad Request. (status code 400)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "addIngredientToRecipe",
        summary = "Add a ingredient to a recipe",
        tags = { "recipeIngredient" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Ingredient added successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/recipeIngredients",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<String> addIngredientToRecipe(
        @Parameter(name = "RecipeDTO", description = "Add Ingredient to Recipe", required = true) @Valid @RequestBody RecipeDTO recipeDTO
    ) {
        return getDelegate().addIngredientToRecipe(recipeDTO);
    }


    /**
     * DELETE /recipeIngredients/{recipeId}/ingredients/{ingredientId} : Delete ingredient from a recipe
     *
     * @param recipeId The id of the recipe (required)
     * @param ingredientId The id of the ingredient (required)
     * @return Ingredient deleted successfully. (status code 200)
     *         or Ingredient or recipe not found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "deleteRecipeIngredient",
        summary = "Delete ingredient from a recipe",
        tags = { "recipeIngredient" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ingredient deleted successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "Ingredient or recipe not found"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/recipeIngredients/{recipeId}/ingredients/{ingredientId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> deleteRecipeIngredient(
        @Parameter(name = "recipeId", description = "The id of the recipe", required = true, in = ParameterIn.PATH) @PathVariable("recipeId") UUID recipeId,
        @Parameter(name = "ingredientId", description = "The id of the ingredient", required = true, in = ParameterIn.PATH) @PathVariable("ingredientId") UUID ingredientId
    ) {
        return getDelegate().deleteRecipeIngredient(recipeId, ingredientId);
    }

}
