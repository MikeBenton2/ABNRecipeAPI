/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.3.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.abn.recipeapi_v1;

import com.abn.recipeapi_v1.model.Error;
import com.abn.recipeapi_v1.model.IngredientDTO;
import java.util.UUID;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-06-24T15:54:59.119904+02:00[Europe/Amsterdam]")
@Validated
@Tag(name = "ingredient", description = "the ingredient API")
public interface IngredientsApi {

    default IngredientsApiDelegate getDelegate() {
        return new IngredientsApiDelegate() {};
    }

    /**
     * POST /ingredients : Create a ingredient
     *
     * @param ingredientDTO Create Ingredient (required)
     * @return Ingredient created successfully. (status code 201)
     *         or Bad Request. (status code 400)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "createIngredient",
        summary = "Create a ingredient",
        tags = { "ingredient" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Ingredient created successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IngredientDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/ingredients",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<IngredientDTO> createIngredient(
        @Parameter(name = "IngredientDTO", description = "Create Ingredient", required = true) @Valid @RequestBody IngredientDTO ingredientDTO
    ) {
        return getDelegate().createIngredient(ingredientDTO);
    }


    /**
     * DELETE /ingredients/{id} : Delete ingredient by id
     *
     * @param id The id of the Ingredient to delete (required)
     * @return Ingredient deleted successfully. (status code 200)
     *         or Ingredient ID not found (status code 404)
     *         or Unauthorized (status code 401)
     */
    @Operation(
        operationId = "deleteIngredient",
        summary = "Delete ingredient by id",
        tags = { "ingredient" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Ingredient deleted successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = String.class))
            }),
            @ApiResponse(responseCode = "404", description = "Ingredient ID not found"),
            @ApiResponse(responseCode = "401", description = "Unauthorized")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/ingredients/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<String> deleteIngredient(
        @Parameter(name = "id", description = "The id of the Ingredient to delete", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getDelegate().deleteIngredient(id);
    }


    /**
     * GET /ingredients/{id} : Info for a specific ingredient
     *
     * @param id The id of the ingredient to retrieve (required)
     * @return Expected response to a valid request (status code 200)
     */
    @Operation(
        operationId = "getIngredientById",
        summary = "Info for a specific ingredient",
        tags = { "ingredient" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Expected response to a valid request", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IngredientDTO.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ingredients/{id}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<IngredientDTO> getIngredientById(
        @Parameter(name = "id", description = "The id of the ingredient to retrieve", required = true, in = ParameterIn.PATH) @PathVariable("id") UUID id
    ) {
        return getDelegate().getIngredientById(id);
    }


    /**
     * GET /ingredients : Retrieve all ingredients
     *
     * @return An array of ingredients (status code 200)
     *         or Bad Request. (status code 400)
     *         or No ingredients found. (status code 404)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "getIngredients",
        summary = "Retrieve all ingredients",
        tags = { "ingredient" },
        responses = {
            @ApiResponse(responseCode = "200", description = "An array of ingredients", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = IngredientDTO.class)))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "404", description = "No ingredients found.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/ingredients",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<IngredientDTO>> getIngredients(
        
    ) {
        return getDelegate().getIngredients();
    }


    /**
     * PUT /ingredients : Update a ingredient
     *
     * @param ingredientDTO Updated Ingredient (required)
     * @return Ingredient updated successfully. (status code 201)
     *         or Bad Request. (status code 400)
     *         or Server error (status code 500)
     */
    @Operation(
        operationId = "updateIngredient",
        summary = "Update a ingredient",
        tags = { "recipe" },
        responses = {
            @ApiResponse(responseCode = "201", description = "Ingredient updated successfully.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = IngredientDTO.class))
            }),
            @ApiResponse(responseCode = "400", description = "Bad Request.", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            }),
            @ApiResponse(responseCode = "500", description = "Server error", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Error.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/ingredients",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<IngredientDTO> updateIngredient(
        @Parameter(name = "IngredientDTO", description = "Updated Ingredient", required = true) @Valid @RequestBody IngredientDTO ingredientDTO
    ) {
        return getDelegate().updateIngredient(ingredientDTO);
    }

}
